/**
 * 条件筛选
 */

//自定义颜色  填充色 边界色 热力图颜色
var CustomerColorConfig = {
    sectionFillColorConfig: [
        ['rgba(32,134,0,1)', 'rgba(79,170,0,1)', 'rgba(146,207,0,1)', 'rgba(226,244,0,1)', 'rgba(255,218,0,1)', 'rgba(255,156,0,1)', 'rgba(255,96,0,1)', 'rgba(192,0,0,1)'],
        ['rgba(69,117,181,1)', 'rgba(91,199,199,1)', 'rgba(116,214,160,1)', 'rgba(255,255,191,1)', 'rgba(235,180,112,1)', 'rgba(214,47,39,1)'],
        ['rgba(255,255,127,1)', 'rgba(25,137,168,1)', 'rgba(24,184,155,1)', 'rgba(15,209,44,1)', 'rgba(92,227,25,1)', 'rgba(173,240,65,1)', 'rgba(12,15,120,1)'],
        //['rgba(12,15,120,1)', 'rgba(173,240,65,1)', 'rgba(92,227,25,1)', 'rgba(15,209,44,1)', 'rgba(24,184,155,1)', 'rgba(25,137,168,1)', 'rgba(255,255,127,1)'],
        //['rgba(255,34,0,1)', 'rgba(255,179,0,1)', 'rgba(255,255,0,1)', 'rgba(166,217,0,1)', 'rgba(68,163,0,1)', 'rgba(0,97,0,1)'],
        //['rgba(0,97,0,1)', 'rgba(68,163,0,1)', 'rgba(166,217,0,1)', 'rgba(255,255,0,1)', 'rgba(255,179,0,1)', 'rgba(255,34,0,1)'],
        //['rgba(70,32,150,1)', 'rgba(161,201,96,1)', 'rgba(209,227,139,1)', 'rgba(255,255,191,1)', 'rgba(165,232,146,1)', 'rgba(116,214,148,1)', 'rgba(80,182,191,1)', 'rgba(48,62,166,1)', 'rgba(77,32,150,1)']
        ['rgba(77,32,150,1)', 'rgba(48,62,166,1)', 'rgba(80,182,191,1)', 'rgba(116,214,148,1)', 'rgba(165,232,146,1)', 'rgba(255,255,191,1)', 'rgba(209,227,139,1)', 'rgba(161,201,96,1)', 'rgba(70,32,150,1)'],
        ['rgba(255,255,255,1)', 'rgba(0,176,80,1)'],
        ['rgba(255,255,255,1)', 'rgba(0,112,192,1)'],
        ['rgba(255,255,255,1)', 'rgba(192,0,0,1)'],
        ['rgba(255,255,255,1)', 'rgba(255,192,0,1)'],
    ],
    sectionStrokeColor: ['rgba(0,0,0,1)', 'rgba(152,240,254,1)', 'rgba(255,255,255,1)', 'rgba(153,164,175,1)', 'rgba(0,176,80,1)', 'rgba(0, 112, 192,1)', 'rgba(192, 0, 0,1)', 'rgba(112, 48, 160,1)', 'rgba(255, 192, 0,1)', 'rgba(86, 255, 160,1)', 'rgba(95, 186, 255,1)', 'rgba(255, 105, 98,1)', 'rgba(180, 93, 255,1)', 'rgba(255, 214, 119,1)', 'rgba(0, 179, 186,1)', 'rgba(5, 0, 197,1)', 'rgba(162, 104, 102,1)', 'rgba(252, 54, 199,1)', 'rgba(255, 106, 16,1)'],
    sectionHeatColor: [{
        0.25: "rgb(0,0,255)",
        0.55: "rgb(0,255,0)",
        0.85: 'rgb(255,255,0)',
        1.0: "rgb(255,0,0)"
    }]
};

(function ($) {
        //未选择等级时禁止触发确定事件
        var isClick = true;
        //选中的a标签集合,点取消初始化为上次选中的a标签状态
        var selLabel = {
            group_1: [],
            group_2: [],
            group_3: [],
        };
        /*
        { id: '', column: '', text: '', type: 'select' },
        */
        function dataLayer(opts) {
            var self = this;

            self.container = opts.container;
            self.parent = opts.parent || '';
            self.isHasFold = opts.isHasFold;
            self.isHasClear=opts.isHasClear;
            self.condition = new condition(self.container, opts.conditions, opts.isHasFold);
            self.oldcondition = $.extend(true, {}, self.condition);
            self.isNeedScroll = opts.isNeedScroll;
            self.isNeedInit = opts.isNeedInit;
            self.opts = {}
            self.opts.callback = $.extend(true, {
                confirm: null,
                cancel: null
            }, {}, opts.callback);

            this.init();
            //if (self.parent) {
            //    $.documentClick($(self.parent).prev(), $(self.parent));
            //}
            //else {
            //    $.documentClick(self.container.parent().prev(), self.container.parent());
            //}
        }
        dataLayer.prototype.init = function () {
            var self = this;
            var sHtml = '<div class="butbox form-butbox clearfix mt05 text-center bort">';
			self.isHasClear=self.isHasClear==undefined?true:self.isHasClear;
            if(self.isHasClear)
            	sHtml+='<a href="javascript:;" class="but_confirm fr clear-condition">清空条件</a>';
            if (self.isHasFold) {
                sHtml += '<a class="more-cont unfold fold-condition" href="javascript:;"></a>';
            }
            sHtml += '</div>';
            self.container.append(sHtml);
            if (self.isHasFold) {
                $('.fold_content').hide();
                self.container.find(".fold-condition").click(function () {
                    if ($(this).hasClass('unfold')) {
                        $(this).removeClass('unfold');
                        $(this).addClass('fold');
                        //展开
                        $('.fold_content').show();
                    } else {
                        $(this).removeClass('fold');
                        $(this).addClass('unfold')
                        //收起
                        $('.fold_content').hide();
                    }
                });
            }
            //清空条件
            self.container.find('.clear-condition').click(function () {
                self.clear();
            })

            if (self.isNeedScroll) {
                self.container.find('.condition_body').addClass('nice-scroll max-h')
            }
            // self.container.html('<div class="clearfix">' + self.container.html() + '</div>');
            //        self.container.append('<div class="clearfix"></div><div class="butbox text-center mt10"> \
            //<a href="javascript:;" class="but_confirm datalayer-confirm mr15" style="padding:0 15px;">确定</a>\
            //<a href="javascript:;" class="but_cancel datalayer-cancel" style="padding:0 15px;">取消</a>\</div>');
            //        self.container.find('.butbox').append('<div class="warnTip fr" style="color:red;display:none;height:24px;margin-top:-1px;margin-left:-160px;margin-right:50px;">请至少选中一个等级</div>');

            $(self.container).find(".nice-scroll").niceScroll({
                styler: "fb",
                cursorcolor: "#cccccc",
                cursorwidth: '7',
                cursorborderradius: '10px',
                background: '#f1f1f1',
                spacebarenabled: false,
                cursorborder: '0',
                autohidemode: 'leave',
                zindex: '1000'
            })

            self.container.find('.datalayer-confirm').click(
                function () {
                    if (isClick) {
                        self.close();
                        //文本类的取参数
                        $.each(self.condition.columns.where({
                            column: 'type',
                            value: 'rangeText'
                        }), function (i, item) {
                            var start = $('#' + item.start).val(),
                                end = $('#' + item.end).val();
                            self.condition.parameters[item.column] = (!start && !end) ? '' : `${start||''}-${end||''}`;
                        });
                        self.oldcondition = $.extend(true, {}, self.condition);
                        self.container.data('datalayer', self);
                        //初始化标签选中状态
                        if (self.isNeedInit) {
                            var currGroup = self.condition.parameters.sPlanType;
                            var curIndex = 'group_' + currGroup;
                            selLabel[curIndex] = [];
                            var currSel = $('div[data-group="group_' + currGroup + '"] a.on');
                            $.each(currSel, function (i, index) {
                                selLabel[curIndex].push(index.innerText);
                            });
                            selLabel[curIndex] = selLabel[curIndex].unique();
                            // initConditions(selLabel);
                        }
                        if (typeof self.opts.callback.confirm == 'function') self.opts.callback.confirm();
                    }
                });
            self.container.find('.datalayer-cancel').click(
                function () {
                    self.close();
                    self.cancel();
                    if (typeof self.opts.callback.cancel == 'function') self.opts.callback.cancel();
                });
            var group_1 = $('div[data-group="group_1"] a.on');
            var group_2 = $('div[data-group="group_2"] a.on');
            var group_3 = $('div[data-group="group_3"] a.on');

            $.each(group_1, function (i, index) {
                selLabel.group_1.push(index.innerText);
            });
            selLabel.group_1 = selLabel.group_1.unique();

            $.each(group_2, function (i, index) {
                selLabel.group_2.push(index.innerText);
            });
            selLabel.group_2 = selLabel.group_2.unique();

            $.each(group_3, function (i, index) {
                selLabel.group_3.push(index.innerText);
            });
            selLabel.group_3 = selLabel.group_3.unique();
        }
        dataLayer.prototype.close = function () {
            var self = this;
            if (self.parent) {
                $(self.parent).prev().removeClass('f_select_on');
                $(self.parent).hide();
            } else {
                self.container.parent().hide();
                $(self.container.parent()).prev().removeClass('f_select_on');
            }
        }
        dataLayer.prototype.open = function () {
            var self = this;
            self.container.parent().show();
        }
        dataLayer.prototype.getControl = function (obj) {
            var self = this,
                controls = {};

            if (obj.type == 'select') controls = self.condition.customSelect;


            return controls[obj.column];
        }
        dataLayer.prototype.cancel = function () {
            var self = this;
            //还原原来的参数
            $.each(self.oldcondition.columns, function (i, item) {
                var oldParameters = self.oldcondition.parameters;
                self.condition.parameters[item.column] = '';
                self.condition.parameters[item.column] = oldParameters[item.column];
                switch (item.type) {
                    case 'radio':
                        $('#' + item.id + ' a').removeClass('on');
                        $('#' + item.id + '[data-' + item.column + '=' + oldParameters[item.column] + ']').addClass('on');
                        item.selected = oldParameters[item.column];
                        self.condition[item.type](item);
                        break;
                    case "districtArea":
                        break;
                    case "select_more":
                        item.selecteds = $.map(item.data, function (dataItem) {
                            if (oldParameters[item.column].indexOf(dataItem.value) > -1) return dataItem.value
                        });
                        self.condition[item.type](item);
                        break;
                    case "select_muti":
                        $.each(item.children, function (i, childItem) {
                            childItem.selected = self.condition.parameters[childItem.column] = oldParameters[childItem.column];
                        });
                        self.condition[item.type](item);
                        break;
                    case "select_more_enum":
                        $('#' + item.id + '_select_text a').removeClass('on');
                        item.selecteds = $.map(item.data, function (dataItem) {
                            if (oldParameters[item.column].indexOf(dataItem.value) > -1) return dataItem.value
                        });
                        self.condition[item.type](item);
                        break;
                    case "select_more_columns":
                        item.selecteds = $.map(item.data, function (dataItem) {
                            if (oldParameters[item.column].indexOf(dataItem.value) > -1) return dataItem.value
                        });
                        self.condition[item.type](item);
                        break;
                    case "time":
                        item.set.startTime = oldParameters[item.begin];
                        item.set.endTime = oldParameters[item.end];
                        self.condition[item.type](item);
                        break;
                    case "select":
                        item.selected = oldParameters[item.column];
                        self.condition[item.type](item);
                        break;
                    case "select_enum":
                        item.selected = oldParameters[item.column];
                        self.condition[item.type](item);
                        break;
                    case "enum_radio_select":
                        item.selected = oldParameters[item.column];
                        $.each(item.data, function (i, dataItem) {
                            if (dataItem.next) {
                                dataItem.next.selected = oldParameters[dataItem.next.column];
                            }
                        })
                        self.condition[item.type](item);
                        break;
                    case "enum_muti_select":
                        item.selected = oldParameters[item.column];
                        $.each(item.data, function (i, dataItem) {
                            if (dataItem.next) {
                                dataItem.next.selecteds = $.map(dataItem.next.data, function (nextDataItem) {
                                    if (oldParameters[dataItem.next.column].indexOf(nextDataItem.value) > -1) return nextDataItem.value
                                });
                            }
                        })
                        self.condition[item.type](item);
                        break;
                    case "select_enum_group":
                        item.selected = oldParameters[item.column];
                        self.condition[item.type](item);
                        break;
                    case "rangeText":
                        var txtArr = oldParameters[item.column].split('-');
                        if (txtArr.length > 0) {
                            item.start_value = txtArr[0];
                            item.end_value = txtArr.length > 1 ? txtArr[1] : "";
                        }
                        self.condition[item.type](item);
                        break;
                }
            });
            isClick = true;
            $('#divCondition_content a.datalayer-confirm').siblings('div').hide();
        }
        dataLayer.prototype.clear = function () {
            var self = this;
            //清空参数
            $.each(self.oldcondition.columns, function (i, item) {
                var oldParameters = self.oldcondition.parameters;
                if (item.type != 'radio')
                    self.condition.parameters[item.column] = '';
                switch (item.type) {
                    case "select_more":
                        item.selecteds = [];
                        self.condition[item.type](item);
                        break;
                    case "select_muti":
                        $.each(item.children, function (i, childItem) {
                            childItem.selected = '';
                        });
                        self.condition[item.type](item);
                        break;
                    case "select_more_enum":
                        $('#' + item.id + '_select_text a').removeClass('on');
                        item.selecteds = [];
                        self.condition[item.type](item);
                        break;
                    case "select_more_columns":
                        item.selecteds = [];
                        self.condition[item.type](item);
                        break;
                    case "time":
                        item.set.startTime = '';
                        item.set.endTime = '';
                        self.condition[item.type](item);
                        break;
                    case "select":
                        item.selected = '';
                        self.condition[item.type](item);
                        break;
                    case "select_enum":
                        item.selected = '';
                        self.condition[item.type](item);
                        break;
                    case "enum_radio_select":
                        item.selected = '';
                        $.each(item.data, function (i, dataItem) {
                            if (dataItem.next) {
                                dataItem.next.selected = '';
                            }
                        })
                        self.condition[item.type](item);
                        break;
                    case "enum_chk_select":
                        item.selected = '';
                        $.each(item.data, function (i, dataItem) {
                            if (dataItem.next) {
                                dataItem.next.selecteds = [];
                            }
                        })
                        self.condition[item.type](item);
                        break;
                    case "select_enum_group":
                        item.selected = '';
                        self.condition[item.type](item);
                        break;
                    case "rangeText":
                        item.start_value = '';
                        item.end_value = '';
                        self.condition[item.type](item);
                        break;
                    case "text":
                        item.value = '';
                        self.condition[item.type](item);
                        break;
                }
            });
            isClick = true;
        }

        function condition(container, columns, isHasFold) {
            this.container = container;
            this.columns = columns;
            this.isHasFold = isHasFold;
            this.customSelect = {};
            this.parameters = {};
            this.timeControl = {};


            var self = this;

            $.each(columns, function (i, j) {
                j.zIndex = 100 - i;
                var method = self[j.type];
                if (method) self[j.type](j);
            });
        }
        //单选 切换
        condition.prototype.radio = function (item) {
            var self = this;
            if (self.container.find('[id=' + item.id + '_content]').length == 0) {
                var innerHtml = '<div class="nav-line-box "  id="' + item.id + '_content" style="z-index:' + item.zIndex + ';' + (item.style || '') + '"> <ul></ul></div>';
                if (self.isHasFold && item.isDefaultFold) self.container.append('<div class="fold_content">' + innerHtml + '</div>');
                else self.container.append(innerHtml);
            }
            var obj = $('#' + item.id + '_content ul');
            obj.html('');
            $.each(item.data, function (i, j) {
                obj.append('<li  data-' + item.column + '="' + (j.value || '') + '"  class="' + (item.selected == j.value ? 'on' : '') + '"><a href="javascript:;" ><span class="txt">' + j.text + '</span></a></li>');
            });

            self.parameters[item.column] = item.selected || '';

            $('#' + item.id + '_content li').click(
                function () {
                    var temp = $(this);
                    if (temp.hasClass('on')) return;

                    $('#' + item.id + '_content li').removeClass('on');
                    $(this).addClass('on');

                    var value = temp.data(item.column.toLowerCase());
                    self.parameters[item.column] = value;
                    if (typeof item.callback == 'function') item.callback(item.column, value);
                });
        }

        //区县选择控件
        condition.prototype.districtArea = function (item) {
            var self = this;
            var innerHtml = ' <div class="form-row clearfix mt05" id="' + item.id + '_content" style="z-index:' + item.zIndex + ';' + (item.style || '') + '">\
                              <div class="fl form-labels form-labels-wid01" >' + item.text + '</div>\
                                <div class="form-select-content fl form-select-wid" id="' + item.id + '" ><div class="form-select-content">\
                                     <div class="form-input pull-left fgw01 mr15">\
                                        <div class="form_select clearfix" id="districtAreaSel">\
                                            <span class="sel_text fl">城市：' + sCityName + '</span>\
                                            <em class="fr icon_caret01"></em>\
                                        </div>\
                                        <div class="form_option " style="min-width:170px;display:none;" id="districtAreaOption">\
                                            <div class="">\
                                                <div class="all p10" style="display:none;"><a href="javascript:;" class="but_confirm" id="selectallcity">全市</a></div>\
                                                <ul class="nav nav-tabs nav-tabs-n01" id="typeswitch" >\
                                                </ul>\
                                               <div class="tab-content" style=" display:none;">\
                                                    <ul class="areaL no-padding no-margin nice-scroll " id="districtUL" ttype="district" style="max-height:220px;overflow: hidden; outline: none;"></ul>\
                                                    <!-- 区县 end-->\
                                                    <!-- 板块 begin-->\
                                                    <ul class="areaL no-padding no-margin nice-scroll"  id="boardUL" ttype="board" style="max-height:220px;overflow: hidden; outline: none;display:none;"></ul>\
                                                    <!-- 板块 end-->\
                                                    <!-- 街道 begin-->\
                                                    <ul class="areaL no-padding no-margin nice-scroll"  id="streetUL" ttype="street" style="max-height:220px;overflow: hidden; outline: none;display:none;"></ul>\
                                                    <!-- 街道 end-->\
                                                    <div class="sub-content nice-scroll" style="display:none;" id="boardContent" name="content">\
                                                    </div>\
                                                    <div class="sub-content nice-scroll" style="display:none;" id="streetContent" name="content">\
                                                    </div>\
                                                </div>\
                                            </div>\
                                            <div class="butbox clearfix" style="display:none;" id="operatecontent">\
                                                <span class="blue02" style="cursor:pointer;" name="checkalldistrict">全选</span>\
                                                <span class="blue02">&nbsp;|&nbsp;</span>\
                                                <span class="blue02" style="cursor:pointer;" name="cancelalldistrict">反选</span>\
                                                <a href="javascript:;" class="but_cancel fr" tname="cancel">取消</a>\
                                                <a href="javascript:;" class="but_confirm fr mr05" tname="sure">确定</a>\
                                            </div>\
                                        </div>\
                                     </div>\
                                </div></div></div>';
            self.container.append(innerHtml);
        }

        //下拉框多选
        condition.prototype.select_more = function (item) {
            var self = this;
            if (self.container.find('.condition_body').length == 0)
                self.container.append('<div class="condition_body " ></div>');

            if (self.container.find('[id=' + item.id + '_content]').length == 0) {
                var innerHtml = '<div  id="' + item.id + '_content" class="form-row clearfix mt05" style="' + (item.style || '') + '">\
                <div class="fl form-labels form-labels-wid01 ">' + item.text + '</div>' +
                    '<div class="form-select-content fl form-select-wid"><div class="form-row clearfix "><div class="form-input pull-left fipw02" style="z-index:' + item.zIndex + ';">' +
                    '<div class="form_select clearfix" id="' + item.id + '_select_text"><span class="sel_text fl">' + item.text + '</span><em class="fr icon_caret01"></em></div>' +
                    '<div class="form_option" style="display:none;" id="' + item.id + '_select_content"><div class="customSelect-content  nice-scroll" style="max-height:220px;overflow: hidden; outline: none;"></div>' +
                    '<div class="butbox clearfix"><span class="blue02 checkall" style="cursor:pointer;">全选</span><span class="blue02">&nbsp;|&nbsp;</span><span class="blue02 reverse-check" style="cursor:pointer;">反选</span><a href="javascript:;" class="but_cancel fr customselect-cancle">取消</a><a href="javascript:;" class="but_confirm fr mr05 customselect-sure">确定</a></div></div></div></div></div></div>'
                if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
                else self.container.find('.condition_body').append(innerHtml);
            }

            item.callback = item.callback || {};
            var obj = new customSelect({
                textObj: item.id + '_select_text',
                contentObj: item.id + '_select_content',
                data: item.data,
                textColumn: 'text',
                valueColumn: 'value',
                defaultText: '',
                text: item.text,
                defaultValues: item.selecteds,
                isUpShow: item.isUpShow,
                event: {
                    sure: function (values) {
                        var value = $.map(values, function (result) {
                            return result;
                        }).join(',');
                        self.parameters[item.column] = value;

                        if (typeof item.callback == 'function') item.callback(item.column, value);
                    }
                },
                type: 'checkbox'
            });
            self.customSelect[item.column] = obj;
            self.parameters[item.column] = item.selecteds ? item.selecteds.join(',') : '';
        }

        //下拉框单选,多个下拉菜单
        condition.prototype.select_muti = function (item) {
            var self = this;
            if (self.container.find('.condition_body').length == 0)
                self.container.append('<div class="condition_body " ></div>');

            if (self.container.find('[id=' + item.id + '_content]').length == 0) {
                var innerHtml = '<div  id="' + item.id + '_content" class="form-row clearfix mt05 style="' + (item.style || '') + '">\
                <div class="fl form-labels form-labels-wid01 ">' + item.text + '</div>' +
                    '<div class="form-select-content fl form-select-wid clearfix">';
                $.each(item.children, function (i, childItem) {
                    innerHtml += '<div class="form-input pull-left mr05" style="z-index:' + item.zIndex + ';' + (childItem.style || '') + '">' +
                        '<div class="form_select clearfix" id="' + childItem.id + '_select_text"><span class="sel_text fl">' + childItem.text + '</span><em class="fr icon_caret01"></em></div>' +
                        '<div class="form_option nice-scroll customSelect-content" style="max-height:220px;overflow: hidden; outline: none;display:none;" id="' + childItem.id + '_select_content"></div></div>';
                });
                innerHtml += '</div></div>';
                if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
                else self.container.find('.condition_body').append(innerHtml);
            }

            $.each(item.children, function (i, childItem) {
                var obj = new customSelect({
                    textObj: childItem.id + '_select_text',
                    contentObj: childItem.id + '_select_content',
                    data: childItem.data,
                    textColumn: childItem.textColumn || 'text',
                    valueColumn: childItem.valueColumn || 'value',
                    defaultText: '',
                    text: childItem.text,
                    defaultValues: childItem.selected,
                    isUpShow: childItem.isUpShow,
                    event: {
                        sure: function (value) {
                            self.parameters[childItem.column] = value;
                            if (typeof childItem.callback == 'function')
                                childItem.callback(childItem.column, value);
                        }
                    },
                    type: 'radio'
                });
                self.customSelect[childItem.column] = obj;
            });
        }

        //多选，平铺枚举
        condition.prototype.select_more_enum = function (item) {
            var self = this;
            if (self.container.find('.condition_body').length == 0)
                self.container.append('<div class="condition_body " ></div>');

            if (self.container.find('[id=' + item.id + '_content]').length == 0) {
                var innerHtml = '  <div  id="' + item.id + '_content" class="form-row clearfix mt05" style="z-index:' + item.zIndex + ';' + (item.style || '') + '"><div>\
                                    <div class="fl form-labels form-labels-wid01">' + item.text + '</div>\
                                    <div class="form-select-content fl form-select-wid">\
                                        <ul class="selection-list" id="' + item.id + '_select_text">' + (function () {
                    var s = '';
                    $.each(item.data, function (i, dataItem) {
                        s += '<li class=" ' + (item.selecteds.indexOf(dataItem.value) > -1 ? 'on' : '') + '" ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '"> <a href="javascript:;" class="a-option" >' + dataItem.text + '</a>'
                    })
                    return s;
                })() + '\
                                        </ul>\
                                    </div>\
                               </div> </div>';

                if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
                else self.container.find('.condition_body').append(innerHtml);
            }
            var obj = $('#' + item.id + '_select_text');
            obj.html('');
            $.each(item.data, function (i, dataItem) {
                obj.append('<li class="' + (item.selecteds.indexOf(dataItem.value) > -1 ? 'on' : '') + '" ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '"> <a href="javascript:;"  class="a-option " >' + dataItem.text + '</a>');
            })

            self.parameters[item.column] = item.selecteds ? item.selecteds.join(',') : '';
            $('#' + item.id + '_select_text li').click(
                function () {
                    var temp = $(this);
                    if (temp.hasClass('on')) temp.removeClass('on');
                    else temp.addClass('on');
                    var arr = [];
                    $.each($('#' + item.id + '_select_text li.on'), function (i, onItem) {
                        arr.push($(onItem).data('value'));
                    })
                    self.parameters[item.column] = arr.join(',');
                    if (typeof item.callback == 'function') item.callback(item.column,  self.parameters[item.column]);
                });
        }

        //下拉框多选,一行多个选项
        condition.prototype.select_more_columns = function (item) {
            var self = this;
            if (self.container.find('.condition_body').length == 0)
                self.container.append('<div class="condition_body " ></div>');

            if (self.container.find('[id=' + item.id + '_content]').length == 0) {
                var innerHtml = '<div   id="' + item.id + '_content" class="form-row mt10" style="' + (item.style || '') + '"><div class="form-input" style="z-index:' + item.zIndex + ';">' +
                    '<div class="form_select clearfix" id="' + item.id + '_select_text"><span class="sel_text fl">' + item.text + '</span><em class="fr icon_caret01"></em></div>' +
                    '<div class="form_option" style="display:none;" id="' + item.id + '_select_content"><div class="customSelect-content  nice-scroll take_option" style="max-height:220px;overflow: hidden; outline: none;"></div>' +
                    '<div class="butbox clearfix"><span class="blue02 checkall" style="cursor:pointer;">全选</span><span class="blue02">&nbsp;|&nbsp;</span><span class="blue02 reverse-check" style="cursor:pointer;">反选</span><a href="javascript:;" class="but_cancel fr customselect-cancle">取消</a><a href="javascript:;" class="but_confirm fr mr05 customselect-sure">确定</a></div></div></div></div>'
                if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
                else self.container.find('.condition_body').append(innerHtml);
            }

            item.callback = item.callback || {};
            var obj = new customSelect({
                textObj: item.id + '_select_text',
                contentObj: item.id + '_select_content',
                data: item.data,
                textColumn: 'text',
                valueColumn: 'value',
                defaultText: '',
                text: item.text,
                defaultValues: item.selecteds,
                isUpShow: item.isUpShow,
                event: {
                    sure: function (values) {
                        var value = $.map(values, function (result) {
                            return result;
                        }).join(',');
                        self.parameters[item.column] = value;

                        if (typeof item.callback == 'function') item.callback(item.column, values);
                    }
                },
                type: 'checkbox'
            });
            self.customSelect[item.column] = obj;
            self.parameters[item.column] = item.selecteds ? item.selecteds.join(',') : '';
        }

        //时间
        condition.prototype.time = function (item) {
            var self = this;
            if (self.container.find('.condition_body').length == 0)
                self.container.append('<div class="condition_body " ></div>');

            if (self.container.find('[id=' + item.id + '_content]').length == 0) {
                var innerHtml = '<div  id="' + item.id + '_content" class="form-row clearfix mt05" style="' + (item.style || '') + '">\
                                     <div class="fl form-labels form-labels-wid01">' + item.text + '</div>\
                                     <div class="form-select-content fl form-select-wid">\
                                          <div class="form-input pull-left fipw02"><div class="form_select"><span class="sel_text fl"><input type="text" class="ui-datepicker-time" style="width:100%;" readonly="" value=""></span><em class="fr icon_caret01"></em></div><div class="ui-datepicker-css" id="' + item.id + '" style="display:none;"></div></div></div></div></div>'
                if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
                else self.container.find('.condition_body').append(innerHtml);
            }
            $("#" + item.id).prev().find("input").val('');
            item.isNeedInitCallback=item.isNeedInitCallback==false?false:true;
            var timeSet = $.extend(true, {}, item.set, {
                    position: 'fixed'
                }),
                obj = new timeCycle(item.id, {
                        //确定时回调函数
                        confirmTimeClickCallback: function (startDate, endDate) {
                            var timearr = (startDate || endDate) ? [startDate, endDate] : [];
                            // self.parameters[item.column] = timearr.join(',');
                            self.parameters[item.begin] = timearr[0];
                            self.parameters[item.end] = timearr[1];
                            self.parameters['sTimeTitle'] = getTimeText(startDate, endDate);
                            self.parameters[item.cycleType] = self.parameters[item.cycleType + '_old'];
                            $('#' + item.id).prev('div').removeClass('f_select_on');
                            if(item.isNeedInitCallback){
	                            if(typeof item.confirmTimeClickCallback=='function'){
	                                item.confirmTimeClickCallback(startDate,endDate);
	                            }
                            }
                            item.isNeedInitCallback=true;
                        },
                        cancelTimeClickCallback: function () {
                            $('#' + item.id).prev('div').removeClass('f_select_on');
                            if(typeof item.cancelTimeClickCallback=='function'){
                                item.cancelTimeClickCallback();
                            }
                        },
                        //清空时间选择后回调方法 返回起止时间为''
                        clearTimeClickCallback: function (startDate, endDate) {
                            var timearr = (startDate || endDate) ? [startDate, endDate] : [];
                            //self.parameters[item.column] = timearr.join(',');
                            self.parameters[item.begin] = timearr[0];
                            self.parameters[item.end] = timearr[1];
                            self.parameters['sTimeTitle'] = getTimeText(startDate, endDate);
                            if(typeof item.clearTimeClickCallback=='function'){
                                item.clearTimeClickCallback(startDate,endDate);
                            }
                        },
                        cycleClickCallback: function (cycle) {
                            self.parameters[item.cycleType + '_old'] = cycle;
                            if(typeof item.cycleClickCallback=='function'){
                                item.cycleClickCallback(cycle);
                            }
                        }
                        // ,boxDisplayCallback: function(show) {
                        //     console.log(show);
                        //     $('#hideLeft_m .main-data-ptnbox').getNiceScroll().hide();
                        // }
                    },
                    (item.cycle || [{
                            cycle: 'day',
                            text: '按天',
                            isDefault: true
                        },
                        {
                            cycle: 'month',
                            text: '按月',
                            isDefault: false
                        },
{
                        cycle: 'year',
                        text: '按年',
                        isDefault: false
                    }]),
                $.extend({}, {
                    skin: 'zhonghai_bj'
                }, timeSet));
            $.documentClick( $("#" + item.id).prev(),  $("#" + item.id));
        if (timeSet.startTime || timeSet.endTime) $('#' + item.id + ' .but_confirm').click();
        else {
            self.parameters[item.begin] = item.set.startTime;
            self.parameters[item.end] = item.set.endTime;
        }
        self.timeControl[item.column] = obj;

        function getTimeText(startDate, endDate) {
            if (startDate || endDate) {
                startDate = startDate.replace(/-/g, "/");
                endDate = endDate.replace(/-/g, "/");
                if (startDate && !endDate)
                    return startDate + '-至今';
                else if (!startDate && endDate)
                    return startDate;
                else
                    return startDate + '-' + endDate;
            } else
                return '';
        }
    }

    //下拉框（单选）
    condition.prototype.select = function (item) {
        var self = this;
        if (self.container.find('.condition_body').length == 0)
            self.container.append('<div class="condition_body " ></div>');

        if (self.container.find('[id=' + item.id + '_content]').length == 0) {
            var innerHtml = '<div  id="' + item.id + '_content" class="form-row mt10 " >\
                               <div class="fl form-labels form-labels-wid01 ">' + item.text + '</div>\
                                <div class="form-select-content fl form-select-wid">\
                                    <div class="form-row clearfix ">\
                                      <div class="form-input pull-left fipw02" style="z-index:' + item.zIndex + ';' + (item.style || '') + '">' +
                '<div class="form_select clearfix" id="' + item.id + '_select_text"><span class="sel_text fl"></span><em class="fr icon_caret01"></em></div>' +
                '<div class="form_option nice-scroll customSelect-content" style="max-height:220px;overflow: hidden; outline: none;display:none;" id="' + item.id + '_select_content"></div></div></div></div>'
            if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
            else self.container.find('.condition_body').append(innerHtml);
        }
        var obj = new customSelect({
            textObj: item.id + '_select_text',
            contentObj: item.id + '_select_content',
            data: item.data,
            textColumn: 'text',
            valueColumn: 'value',
            defaultText: '',
            text: item.text,
            defaultValues: item.selected,
            isUpShow: item.isUpShow,
            event: {
                sure: function (value) {
                    self.parameters[item.column] = value;
                    if (typeof item.callback == 'function') item.callback(item.column, value);
                }
            },
            type: 'radio'
        });

        self.customSelect[item.column] = obj;
    }

    //单选，平铺枚举
    condition.prototype.select_enum = function (item) {
        var self = this;
        if (self.container.find('.condition_body').length == 0)
            self.container.append('<div class="condition_body " ></div>');

        if (self.container.find('[id=' + item.id + '_content]').length == 0) {
            var innerHtml = "";
            if (item.text == "") {
                innerHtml = '  <div  id="' + item.id + '_content" class="form-row clearfix mt05" style="z-index:' + item.zIndex + ';' + (item.style || '') + '"><div>\
                                        <ul  class="selection-list"  id="' + item.id + '_select_text">' + (function () {
                    var s = '';
                    $.each(item.data, function (i, dataItem) {
                        s += '<li class="' + (item.selected == dataItem.value ? 'on' : '') + '" ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '"  > <a href="javascript:;"  class="a-option">' + dataItem.text + '</a></li>'
                    })
                    return s;
                })() + '\
                                        </ul>\
                                    </div>';
            } else {
                innerHtml = '  <div  id="' + item.id + '_content" class="form-row clearfix mt05" style="z-index:' + item.zIndex + ';' + (item.style || '') + '"><div>\
                                    <div class="fl form-labels form-labels-wid01">' + item.text + '</div>\
                                    <div class="form-select-content fl form-select-wid">\
                                        <ul  class="selection-list"  id="' + item.id + '_select_text">' + (function () {
                    var s = '';
                    $.each(item.data, function (i, dataItem) {
                        s += '<li class="' + (item.selected == dataItem.value ? 'on' : '') + '" ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '"  > <a href="javascript:;"  class="a-option">' + dataItem.text + '</a></li>'
                    })
                    return s;
                })() + '\
                                        </ul>\
                                    </div>\
                               </div> </div>';
            }
            if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
            else self.container.find('.condition_body').append(innerHtml);
        }
        var obj = $('#' + item.id + '_select_text');
        obj.html('');
        $.each(item.data, function (i, dataItem) {
            obj.append('<li class="' + (item.selected == dataItem.value ? 'on' : '') + '" ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '" > <a href="javascript:;"  class="a-option">' + dataItem.text + '</a></li>');
        })
        self.parameters[item.column] = item.selected || '';
        $('#' + item.id + '_select_text li').click(
            function () {
                var temp = $(this);
                if (temp.hasClass('on')) return;
                $('#' + item.id + '_select_text li').removeClass('on');
                temp.addClass('on');
                var value = temp.data('value');
                self.parameters[item.column] = value;
                if (typeof item.callback == 'function') item.callback(item.column, value);
            });
    }

    //平铺单选+下拉单选
    condition.prototype.enum_radio_select = function (item) {
        var self = this;
        if (self.container.find('.condition_body').length == 0)
            self.container.append('<div class="condition_body " ></div>');

        if (self.container.find('[id=' + item.id + '_content]').length == 0) {
            var innerHtml = "";
            innerHtml = '  <div  id="' + item.id + '_content" class="form-row clearfix mt05" style="z-index:' + item.zIndex + ';' + (item.style || '') + '"><div>\
                                    <div class="fl form-labels form-labels-wid01">' + item.text + '</div>\
                                    <div class="form-select-content fl form-select-wid">\
                                        <ul  class="selection-list"  id="' + item.id + '_select_text">' + (function () {
                var s = '';
                $.each(item.data, function (i, dataItem) {
                    s += '<li class="' + (item.selected == dataItem.value ? 'on' : '') + '" ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '"  > <a href="javascript:;"  class="a-option">' + dataItem.text + '</a></li>'
                })
                return s;
            })() + '\
                                        </ul>\
                                    </div>\
                               </div> </div>';
            if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
            else self.container.find('.condition_body').append(innerHtml);
        }
        var obj = $('#' + item.id + '_select_text');
        obj.html('');
        $.each(item.data, function (i, dataItem) {
            obj.append('<li class="' + (item.selected == dataItem.value ? 'on' : '') + '" ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '" > <a href="javascript:;"  class="a-option">' + dataItem.text + '</a></li>');
        })
        self.parameters[item.column] = item.selected || '';
        $('#' + item.id + '_select_text li').click(
            function () {
                var temp = $(this);
                if (temp.hasClass('on')) return;
                $('#' + item.id + '_select_text li').removeClass('on');
                temp.addClass('on');
                var value = temp.data('value');
                self.parameters[item.column] = value;
                var curData = item.data.where({
                    column: 'value',
                    value: value
                });
                $.each(item.data, function (i, dataItem) {
                    if (dataItem.next && dataItem.next.id)
                        $('#' + dataItem.next.id + '_content').hide();
                });
                if (curData.length > 0 && curData[0].next && curData[0].next.id) {
                    $('#' + curData[0].next.id + '_content').show();
                }
                if (typeof item.callback == 'function') item.callback(item.column, value);
            });
        //绑定下拉菜单
        $.each(item.data, function (i, dataItem) {
            var nextItem = dataItem.next;
            if (nextItem) {
                var curContainer = $('#' + item.id + '_content').find('.form-select-content');
                if (curContainer.find('[id=' + nextItem.id + '_content]').length == 0) {
                    curContainer.append('<div  id="' + nextItem.id + '_content" class="form-row mt10 " style="display:' + (dataItem.value == item.selected ? '' : 'none') + '" >\
                                    <div class="form-row clearfix mt05 ">\
                                      <div class="form-input pull-left fipw02" style="z-index:' + item.zIndex + ';' + (nextItem.style || '') + '">' +
                        '<div class="form_select clearfix" id="' + nextItem.id + '_select_text"><span class="sel_text fl"></span><em class="fr icon_caret01"></em></div>' +
                        '<div class="form_option nice-scroll customSelect-content" style="max-height:220px;overflow: hidden; outline: none;display:none;" id="' + nextItem.id + '_select_content"></div></div></div>');
                }
                var obj = new customSelect({
                    textObj: nextItem.id + '_select_text',
                    contentObj: nextItem.id + '_select_content',
                    data: nextItem.data,
                    textColumn: 'text',
                    valueColumn: 'value',
                    defaultText:'',
                    text: nextItem.text,
                    defaultValues: nextItem.selected,
                    isUpShow: nextItem.isUpShow,
                    event: {
                        sure: function (value) {
                            self.parameters[nextItem.column] = value;
                            if (typeof item.callback == 'function') item.callback(nextItem.column, value);
                        }
                    },
                    type: 'radio'
                });
                self.customSelect[nextItem.column] = obj;
            }
        });
    }

    //平铺单选+下拉多选
    condition.prototype.enum_chk_select = function (item) {
        var self = this;
        if (self.container.find('.condition_body').length == 0)
            self.container.append('<div class="condition_body " ></div>');

        if (self.container.find('[id=' + item.id + '_content]').length == 0) {
            var innerHtml = "";
            innerHtml = '  <div  id="' + item.id + '_content" class="form-row clearfix mt05" style="z-index:' + item.zIndex + ';' + (item.style || '') + '"><div>\
                                    <div class="fl form-labels form-labels-wid01">' + item.text + '</div>\
                                    <div class="form-select-content fl form-select-wid">\
                                        <ul  class="selection-list"  id="' + item.id + '_select_text">' + (function () {
                var s = '';
                $.each(item.data, function (i, dataItem) {
                    s += '<li class="' + (item.selected == dataItem.value ? 'on' : '') + '" ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '"  > <a href="javascript:;"  class="a-option">' + dataItem.text + '</a></li>'
                })
                return s;
            })() + '\
                                        </ul>\
                                    </div>\
                               </div> </div>';
            if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
            else self.container.find('.condition_body').append(innerHtml);
        }
        var obj = $('#' + item.id + '_select_text');
        obj.html('');
        $.each(item.data, function (i, dataItem) {
            obj.append('<li class="' + (item.selected == dataItem.value ? 'on' : '') + '" ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '" > <a href="javascript:;"  class="a-option">' + dataItem.text + '</a></li>');
        })
        self.parameters[item.column] = item.selected || '';
        $('#' + item.id + '_select_text li').click(
            function () {
                var temp = $(this);
                if (temp.hasClass('on')) return;
                $('#' + item.id + '_select_text li').removeClass('on');
                temp.addClass('on');
                var value = temp.data('value');
                self.parameters[item.column] = value;
                var curData = item.data.where({
                    column: 'value',
                    value: value
                });
                //其他隐藏
                $.each(item.data, function (i, dataItem) {
                    if (dataItem.next && dataItem.next.id)
                        $('#' + dataItem.next.id + '_content').hide();
                });
                if (curData.length > 0 && curData[0].next && curData[0].next.id) {
                    $('#' + curData[0].next.id + '_content').show();
                }
                if (typeof item.callback == 'function') item.callback(item.column, value);
            });
        //绑定下拉菜单
        $.each(item.data, function (i, dataItem) {
            var nextItem = dataItem.next;
            if (nextItem) {
                var curContainer = $('#' + item.id + '_content').find('.form-select-content');

                if (curContainer.find('[id=' + nextItem.id + '_content]').length == 0)
                    curContainer.append('<div  id="' + nextItem.id + '_content" class="form-row clearfix mt05" style="display:' + (dataItem.value == item.selected ? '' : 'none') + (nextItem.style || '') + '">' +
                        '<div class="form-row clearfix "><div class="form-input pull-left fipw02" style="z-index:' + item.zIndex + ';">' +
                        '<div class="form_select clearfix" id="' + nextItem.id + '_select_text"><span class="sel_text fl">' + nextItem.text + '</span><em class="fr icon_caret01"></em></div>' +
                        '<div class="form_option" style="display:none;" id="' + nextItem.id + '_select_content"><div class="customSelect-content  nice-scroll" style="max-height:220px;overflow: hidden; outline: none;"></div>' +
                        '<div class="butbox clearfix"><span class="blue02 checkall" style="cursor:pointer;">全选</span><span class="blue02">&nbsp;|&nbsp;</span><span class="blue02 reverse-check" style="cursor:pointer;">反选</span><a href="javascript:;" class="but_cancel fr customselect-cancle">取消</a><a href="javascript:;" class="but_confirm fr mr05 customselect-sure">确定</a></div></div></div></div>');


                nextItem.callback = nextItem.callback || {};
                var obj = new customSelect({
                    textObj: nextItem.id + '_select_text',
                    contentObj: nextItem.id + '_select_content',
                    data: nextItem.data,
                    textColumn: 'text',
                    valueColumn: 'value',
                    defaultText: '',
                    text: nextItem.text,
                    defaultValues: nextItem.selecteds,
                    isUpShow: nextItem.isUpShow,
                    event: {
                        sure: function (values) {
                            var value = $.map(values, function (result) {
                                return result;
                            }).join(',');
                            self.parameters[nextItem.column] = value;

                            if (typeof nextItem.callback == 'function') nextItem.callback(nextItem.column, value);
                        }
                    },
                    type: 'checkbox'
                });
                self.customSelect[nextItem.column] = obj;
                self.parameters[nextItem.column] = nextItem.selecteds ? nextItem.selecteds.join(',') : '';
            }
        });
    }

    //组单选
    condition.prototype.select_enum_group = function (item) {
        var self = this;
        if (self.container.find('.condition_body').length == 0)
            self.container.append('<div class="condition_body " ></div>');

        if (self.container.find('[id=' + item.id + '_content]').length == 0) {
            var innerHtml = '  <div  id="' + item.id + '_content"  class="form-row clearfix mt05" style="z-index:' + item.zIndex + ';' + (item.style || '') + '"><div>\
                                    <div class="fl form-labels form-labels-wid01">' + item.text + '</div>\
                                    <div class="form-select-content fl form-select-wid">\
                                        <ul class="selection-list" id="' + item.id + '_select_text"  data-group="' + item.group + '">' + (function () {
                var s = '';
                $.each(item.data, function (i, dataItem) {
                    s += '<li ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '" > <a href="javascript:;" class="a-option">' + dataItem.text + '</a></li>'
                })
                return s;
            })() + '\
                                        </ul>\
                                    </div>\
                               </div> </div>';
            if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
            else self.container.find('.condition_body').append(innerHtml);
        }
        var obj = $('#' + item.id + '_select_text');
        obj.html('');

        $.each(item.data, function (i, dataItem) {
            obj.append('<li ' + (item.attr ? item.attr + '="' + dataItem.value + '"' : '') + ' data-text="' + dataItem.text + '" data-value="' + dataItem.value + '" > <a href="javascript:;"  class="a-option">' + dataItem.text + '</a><li>');
        })

        self.parameters[item.column] = item.selected || '';
        //只对第一个seleted加选中，一组中只允许选中一个
        if ($('[data-group=' + item.group + '] li.on').length == 0) {
            var obj = $('[data-group=' + item.group + '] li[data-value=' + item.selected + ']');
            obj.addClass('on');
        }
        $('[data-group=' + item.group + '] li').click(
            function () {
                var temp = $(this);
                if (temp.hasClass('on')) return;
                $('[data-group=' + item.group + '] li').removeClass('on');
                temp.addClass('on');
                var value = temp.data('value');
                self.parameters[item.column] = value;
                if (typeof item.callback == 'function') item.callback(item.column, value);
            });
    }

    //取值范围
    condition.prototype.rangeText = function (item) {
        var self = this;
        if (self.container.find('.condition_body').length == 0)
            self.container.append('<div class="condition_body " ></div>');

        if (self.container.find('[id=' + item.id + '_content]').length == 0) {
            var innerHtml = '<div  id="' + item.id + '_content" class="form-row clearfix mt05">\
                        <div class="fl form-labels form-labels-wid01">' + item.text + '</div>\
                        <div class="form-select-content fl form-select-wid">\
                            <div class="form-input pull-left fipw01">\
                                <input type="text" class="f_inpbox"  id="' + item.start + '" value="' + (item.start_value || '') + '" >\
                                <span class="unit-box">' + (item.unit || '') + '</span></div>\
                            <span class="lh28 pull-left gary9">&nbsp;&nbsp;—&nbsp;&nbsp;</span>\
                            <div class="form-input pull-left fipw01">\
                               <input type="text" class="f_inpbox"  id="' + item.end + '" value="' + (item.end_value || '') + '">\
                               <span class="unit-box">' + item.unit + '</span>\
                            </div></div></div>'
            if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
            else self.container.find('.condition_body').append(innerHtml);
        }
        else{
        	$('#'+item.start).val(item.start_value||'');
        	$('#'+item.end).val(item.start_value||'');
        }
        self.parameters[item.column] = (item.start_value == "" && item.end_value == "") ? "" : (item.start_value + '-' + item.end_value);
    }
    //文本
    condition.prototype.text = function (item) {
        var self = this;
        if (self.container.find('.condition_body').length == 0)
            self.container.append('<div class="condition_body " ></div>');
        if (self.container.find('[id=' + item.id + ']').length == 0) {
            var innerHtml = '<div  id="' + item.id + '_content" class="form-row clearfix mt05">\
                                        <div class="fl form-labels form-labels-wid01 ">' + item.text + '</div>\
                                        <div class="form-select-content fl form-select-wid">\
                                        <div class="form-input pull-left fipw02" style="position:relative">\
                                            <input type="text" class="f_inpbox"  id="' + item.id + '"  filter="2" value="' + (item.value || '') + '" >\
                                            <span class="unit-box">' + (item.unit || '') + '</span>\
                                        </div></div></div>'
            if (self.isHasFold && item.isDefaultFold) self.container.find('.condition_body').append('<div class="fold_content">' + innerHtml + '</div>');
            else self.container.find('.condition_body').append(innerHtml);
        }
        self.parameters[item.column] = item.value || '';
        $('#'+item.id).val(item.value || '')
        $("#" + item.id).unbind("keyup").keyup(function () {
            var _val = $("#" + item.id).val();
            $("#" + item.id).attr('title', _val);
            self.parameters[item.column] = _val;
        });
    }
    //检索
    condition.prototype.keySearch = function (item) {
        var self = this;
        if (self.container.find('.condition_body').length == 0)
            self.container.append('<div class="condition_body " ></div>');
        if (self.container.find('[id=' + item.id + ']').length == 0)
            self.container.find('.condition_body').append('<div  id="' + item.id + '_content" class="form-row clearfix mt05">\
                                        <div class="fl form-labels form-labels-wid01 ">' + item.text + ' </div>\
                                        <div class="form-select-content fl form-select-wid">\
                                        <div class="form-select-content clearfix font12" style="position:relative">\
                                            <input type="text" class="input_text"  id="' + item.id + '" filter="2" style="width:230px" >\
                                            <div class="form_option" style="display: none;">\
                                                <div class="nice-scroll" style="overflow: hidden;" name="searchContent">\
                                                    <a href="javascript:;" class="f_optionbox">企业1</a>\
                                                    <a href="javascript:;" class="f_optionbox">企业2</a>\
                                                </div>\
                                            </div>\
                                        </div></div></div>');
        self.parameters[item.column] = "";

        $("#" + item.id).unbind("focus").focus(function () {
            var _val = $("#" + item.id).val();
            if (_val != "") {
                return;
            }
            var keywords = keyword.getCookie();
            keywords = keywords.order('date', 'desc');
            var _str = '';
            $("#" + item.id).next().find("div[name='searchContent']").empty();
            $.each(keywords, function (i, j) {
                $("#" + item.id).next().find("div[name='searchContent']").append('<a href="javascript:;" class="f_optionbox" tvalue="' + j.skeyValue + '">' + j.skey + '</a>');
            });
            $("#" + item.id).next().show();


            $("#" + item.id).next().find("div[name='searchContent'] a").unbind("click").click(function () {
                $("#" + item.id).val($(this).text());
                self.parameters[item.column] = $(this).attr("tvalue");
                $("#" + item.id).next().hide();
            });
        });



        $("#" + item.id).unbind("keyup").keyup(function () {
            self.parameters[item.column] = '';
            var _value = $("#" + item.id).val();
            if (_value != "") {
                $.ajax({
                    url: item.searchParm.url,
                    data: {
                        jsonParameters: $.toJSON({
                            sKeyWord: _value
                        })
                    },
                    dataType: 'json',
                    type: 'post',
                    success: function (jsonData) {
                        $("#" + item.id).next().find("div[name='searchContent']").empty();
                        if (jsonData && jsonData.Table && jsonData.Table.length > 0) {
                            $.each(jsonData.Table, function (i, j) {
                                $("#" + item.id).next().find("div[name='searchContent']").append('<a href="javascript:;" class="f_optionbox" tvalue="' + j[item.searchParm.valueField] + '">' + j[item.searchParm.nameField] + '</a>');
                            })
                            $("#" + item.id).next().show();
                        }

                        $("#" + item.id).next().find("div[name='searchContent'] a").unbind("click").click(function () {
                            $("#" + item.id).val($(this).text());
                            self.parameters[item.column] = $(this).attr("tvalue");
                            $("#" + item.id).next().hide();

                            var _skey = $(this).text();
                            var keywords = keyword.getCookie();
                            if (_skey != '' && typeof _skey != 'undefined') {
                                keywords = keywords.remove({
                                    value: _skey,
                                    column: 'skey'
                                });
                                if (keywords.length == 7) keywords = keywords.remove({
                                    value: keywords[0].skey,
                                    column: 'skey'
                                });
                                keywords.push({
                                    skey: _skey,
                                    date: new Date().format('yyyyMMddhhmmss'),
                                    skeyValue: $(this).attr("tvalue")
                                });
                                keyword.setCookie($.toJSON(keywords));
                            }
                        });

                    }
                })
            } else {
                $("#" + item.id).next().hide();
            }
        });

        var keyword = {
            jinkeCookie: 'jinke.company.search.keyword',
            setCookie: function (value) {
                var Days = 30;
                var exp = new Date();
                exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
                document.cookie = keyword.jinkeCookie + "=" + value +
                    "; expires=" + exp.toGMTString() +
                    "; domain=jinke.fang.com";
            },
            getCookie: function () {
                var arr, reg = new RegExp("(^| )" + keyword.jinkeCookie + "=([^;]*)(;|$)");
                if (arr = document.cookie.match(reg)) {
                    var _str = unescape(arr[2]);
                    return eval(_str);
                } else
                    return [];
            },
        }
    }

    condition.prototype.set = function (item) {
        var self = this;

        self.columns = $.map(self.columns, function (j) {
            if (j.id == item.id) {
                self[item.type](item);
                return item;
            }
            return j;
        });
    }

    function customSelect(paramter) {
        var type = {
            radio: 'radio',
            checkbox: 'checkbox'
        };

        var me = this;
        me.paramter = $.extend({}, {
            textObj: '',
            contentObj: '',
            defaultText: '',
            data: '',
            text: '',
            textColumn: '',
            valueColumn: '',
            event: {
                change: function () {},
                sure: function () {},
                cancel: function () {}
            },
            defaultValues: '',
            type: 'radio',
            isUpShow: false, //是否下拉内容翻向上侧
            selectIndex: [] //选中的
        }, paramter);

        if (typeof me.paramter.textObj == 'string') me.paramter.textObj = $('#' + me.paramter.textObj);
        if (typeof me.paramter.contentObj == 'string') me.paramter.contentObj = $('#' + me.paramter.contentObj);

        //绑定



        me.bindHtml();
        //event
        (function (t, c) {
            t.unbind('click').click(function () {


                if (c.is(':visible')) {
                    c.hide();
                    t.removeClass('f_select_on');
                    $('body').find('.form-ptn-bottom').removeClass('form-ptn-bottom'); //翻向上侧显示
                } else {
                    c.show();
                    t.addClass('f_select_on');
                    if (me.paramter.isUpShow == true) {
                        $(this).parent().addClass('form-ptn-bottom');
                    }
                }
                var niceScroll = c.find('.nice-scroll');
                if (niceScroll.length > 0) {
                    niceScroll.getNiceScroll().resize();
                }
            });



            if (me.paramter.type == type.checkbox) {
                $.documentClick(t, c, function () {
                    if (typeof me.paramter.event.cancel == 'function') {
                        me.paramter.event.cancel(); //取消按钮的回调函数
                    } else {
                        c.find("em.check").removeClass("checked");
                        $.each(me.paramter.selectIndex, function (i, j) {
                            var obj = c.find("input[type=checkbox][value='" + j + "']");
                            obj.attr('checked', 'checked');
                            obj.next().addClass('checked');
                        });
                    }
                });

                c.find('.customSelect-content').unbind().click(function (e) {
                    var srcElement = e.srcElement || e.target;
                    if (srcElement.tagName.toLowerCase() != 'a' && srcElement.parentNode.tagName.toLowerCase() != 'a') return;

                    var temp = srcElement.tagName.toLowerCase() == 'a' ? $(srcElement) : $(srcElement.parentNode);

                    var input = temp.find('input'),
                        em = temp.find('em');

                    if (input[0].checked) {
                        input.removeProp('checked');
                        em.removeClass('checked');
                    } else {
                        input.prop('checked', 'checked');
                        em.addClass('checked');
                    }
                });

                c.find('.customselect-sure').unbind().click(
                    function () {
                        //获取所有的数据
                        var selectbox = c.find('input[type=checkbox]:checked');
                        var selecttext = selectbox.map(function () {
                            return $(this).data('text');
                        }).get().join(',');

                        var f = typeof (t.find('span')) == 'undefined' ? t : t.find('span');
                        f.text(selecttext ? selecttext : me.paramter.defaultText);
                        f.attr("title", selecttext);
                        var values = selectbox.map(function () {
                            return this.value;
                        });
                        me.paramter.selectIndex = me.selectData = values;

                        if (typeof me.paramter.event.sure == 'function') me.paramter.event.sure(values);

                        c.hide();
                        t.removeClass('f_select_on');

                    }).click();
                //取消事件
                c.find('.customselect-cancle').unbind().click(
                    function () {
                        t.removeClass('f_select_on');
                        c.find("em.check").removeClass("checked");
                        $.each(me.paramter.selectIndex, function (i, j) {
                            var obj = c.find("input[type=checkbox][value='" + j + "']");
                            obj.attr('checked', 'checked');
                            obj.next().addClass('checked');
                        });

                        if (typeof me.paramter.event.cancel == 'function') me.paramter.event.cancel();

                        c.hide();
                        $('body').find('.form-ptn-bottom').removeClass('form-ptn-bottom');
                    });
                //全选
                c.find('.checkall').unbind().click(
                    function () {
                        c.find('[type=checkbox]').not('input:checked').next().addClass('checked')
                        c.find('input[type=checkbox]').prop('checked', 'checked');
                    });

                c.find('.reverse-check').unbind().click(
                    function () {
                        var checkedbox = c.find('input[type=checkbox]:checked');
                        c.find('input[type=checkbox]').prop('checked', 'checked').next().addClass('checked');
                        checkedbox.removeProp('checked').next().removeClass('checked');
                    });
            } else if (me.paramter.type == 'radio') {
                $.documentClick(t, c);


                c.click(function (e) {
                    var srcElement = e.srcElement || e.target;
                    if (srcElement.tagName != 'A') return;

                    var temp = $(srcElement);
                    c.find('a').removeClass('on');


                    c.find('a input').removeProp('checked');
                    var radio = temp.find('input');
                    radio.prop('checked', 'chcked');

                    var value = me.selectData = radio.val(),
                        text = radio.data('text');

                    var f = typeof (t.find('span')) == 'undefined' ? t : t.find('span');

                    f.text((text || me.paramter.defaultText));
                    c.hide();
                    t.removeClass('f_select_on');

                    if (!temp.hasClass('on')) {
                        if (typeof me.paramter.event.sure == 'function')
                            me.paramter.event.sure(value);
                    }
                    temp.addClass('on');
                    $('body').find('.form-ptn-bottom').removeClass('form-ptn-bottom');
                });
                me.click(me.paramter.defaultValues.toString() || 0);
            }
        })(me.paramter.textObj, me.paramter.contentObj);

        me.paramter.contentObj.find(".nice-scroll").niceScroll({
            styler: "fb",
            cursorcolor: "#cccccc",
            cursorwidth: '7',
            cursorborderradius: '10px',
            background: '#f1f1f1',
            spacebarenabled: false,
            cursorborder: '0',
            autohidemode: 'leave',
            zindex: '1000'
        })
    }
    customSelect.prototype.click = function (value) {
        var self = this;

        if (typeof value == 'number')
            self.paramter.contentObj.find('a:eq(' + value + ')').click();
        else {
            var radio = self.paramter.contentObj.find('input[value="' + value + '"]');
            if (radio.length > 0) radio.parent().click();
        }
    }
    customSelect.prototype.bindHtml = function () {
        var self = this;

        var selectHtml = '';
        $.each(self.paramter.data, function (index, item) {
            var value = typeof item == 'string' ? item : item[self.paramter.valueColumn],
                text = typeof item == 'string' ? item : item[self.paramter.textColumn];

            var isCheck = (function (defaultValues, v) {
                if (typeof defaultValues == 'string') return defaultValues == v;
                else if (typeof defaultValues == 'object') return defaultValues.contains({
                    value: v
                });
                return false;
            })(self.paramter.defaultValues, value);
            selectHtml += '<a href="javascript:" class="f_optionbox clearfix">\
                                <input type="' + self.paramter.type + '" data-text="' + text + '" value="' + value + '"  ' + (isCheck ? 'checked="checked"' : '') + '  style="display:none;">\
                                ' + (self.paramter.type == 'checkbox' ? '<em name="div_sellcheck" class="check ' + (isCheck ? 'checked' : '') + '"></em>' : '') + text +
                '</a>';
            if (isCheck) {
                self.paramter.selectIndex.push(value);
            }
        });
        var curContentObj =
            self.paramter.contentObj.find('.customSelect-content').length > 0 ?
            self.paramter.contentObj.find('.customSelect-content') :
            self.paramter.contentObj;
        curContentObj.html(selectHtml);
    }
    //重新设置数据源
    customSelect.prototype.setData = function (data, selected) {
        var self = this;

        selected = (selected || '').toString();
        self.paramter.defaultValues = selected;
        self.paramter.data = data;

        self.bindHtml();

        if (self.paramter.type == 'radio') {
            if (data.length > 0) self.click(selected || 0);
            else {
                if (typeof self.paramter.event.sure == 'function')
                    self.paramter.event.sure('');
            }
        } else {
            self.paramter.contentObj.find('.customselect-sure').click();
        }
    }
    //触发回调
    customSelect.prototype.change = function () {
        var self = this;
        if (typeof self.paramter.event.sure == 'function')
            self.paramter.event.sure(self.selectData);
    }


    $.fn.getDataLayer = function () {
        return this.data('datalayer');
    }
    $.fn.dataLayer = function (opts) {
        opts.container = this;
        var _dataLayer = new dataLayer(opts);
        this.data('datalayer', _dataLayer);
        if (typeof opts.callback.init == 'function')
            opts.callback.init(this);
        return _dataLayer;
    }


    $.fn.getParameter = function (opts) {
        opts = opts || {};

        var isAll = opts.isAll || '',
            N = opts.N || true;
        var datatlayer = this.getDataLayer();
        //文本类的取参数
        $.each(datatlayer.condition.columns.where({
            column: 'type',
            value: 'rangeText'
        }), function (i, item) {
            var start = $('#' + item.start).val(),
                end = $('#' + item.end).val();
            datatlayer.condition.parameters[item.column] = (!start && !end) ? '' : `${start||''}-${end||''}`;
        });
        datatlayer.oldcondition = $.extend(true, {}, datatlayer.condition);
        datatlayer.container.data('datalayer', datatlayer);
        datatlayer = this.getDataLayer();

        var condition = N ? datatlayer.condition : datatlayer.oldcondition;
        var allParameters = condition.parameters;
        var param = {};
        if (isAll) {
            $.each(condition.columns, function (i, item) {
                if (item.begin) param[item.begin] = allParameters[item.begin];
                if (item.end) param[item.end] = allParameters[item.end];
                if (item.cycleType) param[item.cycleType] = allParameters[item.cycleType]
                if (item.param_name && allParameters[item.column] != '') param[item.param_name] = allParameters[item.column];
                if (item.children) {
                    $.each(item.children, function (j, childItem) {
                        param[childItem.param_name] = allParameters[childItem.column];
                    })
                }
                if (item.type == "enum_radio_select" || item.type == "enum_chk_select") {
                    $.each(item.data, function (j, dataItem) {
                        if (dataItem.next && (param[item.column] || '').toString().split(',').indexOf(dataItem.value) > -1) param[dataItem.next.param_name] = allParameters[dataItem.next.column];
                    })
                }
            });
        } else {
            //隐藏的指标不传参数,给参数赋值
            $.each(condition.columns, function (i, item) {
                var obj = $('#' + item.id + '_content').length > 0 ? $('#' + item.id + '_content') : $('#' + item.id);
                if (obj.css('display') != 'none') {
                    if (item.begin) param[item.begin] = allParameters[item.begin];
                    if (item.end) param[item.end] = allParameters[item.end];
                    if (item.cycleType) param[item.cycleType] = allParameters[item.cycleType]
                    if (item.param_name && allParameters[item.column] != '') param[item.param_name] = allParameters[item.column];
                    if (item.children) {
                        $.each(item.children, function (j, childItem) {
                            param[childItem.param_name] = allParameters[childItem.column];
                        })
                    }
                    if (item.type == "enum_radio_select" || item.type == "enum_chk_select") {
                        $.each(item.data, function (j, dataItem) {
                            if (dataItem.next && (param[item.column] || '').toString().split(',').indexOf(dataItem.value) > -1) param[dataItem.next.param_name] = allParameters[dataItem.next.column];
                        })
                    }
                }
            });
        }

        return param;
    }

    //绑定异步获取数据
    $.fn.setData = function (item) {
        var _dataLayer = this.data('datalayer');
        _dataLayer.condition.set(item);
        _dataLayer.oldcondition = $.extend(true, {}, _dataLayer.condition);
        this.data('datalayer', _dataLayer);
    }
    //设置可见的条件
    $.fn.setVisible = function (values) {
        var _dataLayer = this.getDataLayer();
        if (_dataLayer) {
            var columns = _dataLayer.condition.columns;
            if (values && values.length > 0) {
                $('.condition_body p').hide();
                $.each(columns, function (i, item) {
                    var obj = $('#' + item.id + '_content').length > 0 ? $('#' + item.id + '_content') : $('#' + item.id);
                    if (values.indexOf(item.column) == -1) {
                        obj.hide();
                    } else {
                        obj.show();
                    }
                });
            }
        }
    }

    $.fn.customSelect = function (opts) {
        var obj = new customSelect(opts);
        this.data('customSelect', obj);
        return this;
    }

    $.fn.getCustomSelect = function () {
        return this.data('customSelect');
    }
})(jQuery);

function validateNumVal(obj, decimalNum) {
    //判断输入的是否为数字
    var value = $(obj).val();
    if (isNaN(value) || value == 0) {
        $(obj).val('');
        return;
    }
    var index = value.indexOf(".");
    if (index > 0) {
        var result = value.substr(index);
        if (result.length > 0) {
            var v = value.substr(index, value.length);
            if (decimalNum == 0 || v.length > decimalNum + 1) {
                value = parseFloat(value.substr(0, index + v.length - 1)).toFixed(decimalNum);
                $(obj).val(value);
            } else {
                $(obj).val(value);
            }
        }
    }
}